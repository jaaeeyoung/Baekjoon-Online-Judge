'''
===================================================================================================================================
문제
===================================================================================================================================
[2512] 예산
===================================================================================================================================
Log
===================================================================================================================================
' 2022-03-08-TUE : 문제 파악
                   문제 해결
===================================================================================================================================
'''

'''
1. 이진탐색 - 재귀 이용
2. mid를 상한으로 했을 때 요청되는 예산이 합이 총 예산보다 작으면 answer를 최댓값으로 갱신
'''

import sys
input = sys.stdin.readline

# 이진탐색 함수
def binary_search(start, end):
    global answer
    
    # 찾는 값이 없으면 None 반환
    if start > end:
        return None

    mid = (start + end) // 2
    
    # mid index의 값으로 상한값을 정했을 때 전체 예산 계산
    total = 0
    for i in request:
        # 요청 금액이 상한값보다 크면 상한값으로 요청
        if mid < i:
            total += mid
        # 그 외의 상황은 요청 금액 그대로 요청
        else:
            total += i
    
    # mid index의 값으로 상한값을 정했을 때 전체 예산 넘어가면 상한값을 낮춰야함
    if total > budget:
        return binary_search(start, mid - 1)
    
    else: # 그 외의 상황에서는 상한값의 최댓값 찾기
        if mid > answer:
            answer = mid
            return binary_search(mid + 1, end)

# 입력
_ = int(input())
request = list(map(int, input().split()))
budget = int(input())

answer = 0
binary_search(0, max(request))
print(answer)