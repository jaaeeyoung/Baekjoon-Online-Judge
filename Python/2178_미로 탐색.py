'''
===================================================================================================================================
문제
===================================================================================================================================
[2178] 미로 탐색
===================================================================================================================================
시간 및 메모리 제한
===================================================================================================================================
# 시간 제한 : 1 초
# 메모리 제한 : 192 MB
===================================================================================================================================
문제 설명
===================================================================================================================================
# N×M크기의 배열로 표현되는 미로가 있다.

    1	0	1	1	1	1
    1	0	1	0	1	0
    1	0	1	0	1	1
    1	1	1	0	1	1

# 미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 
  위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 
  수 있다.

# 위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.
===================================================================================================================================
입력
===================================================================================================================================
# 첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어
  진다.
===================================================================================================================================
출력
===================================================================================================================================
# 첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.
===================================================================================================================================
입출력 예
===================================================================================================================================
입력 1
4 6
101111
101010
101011
111011

출력 1
15

입력 2
4 6
110110
110110
111111
111101

출력 2
9

입력 3
2 25
1011101110111011101110111
1110111011101110111011101

출력 3
38

입력 4
7 7
1011111
1110001
1000001
1000001
1000001
1000001
1111111

출력 4
13
===================================================================================================================================
알고리즘 분류
===================================================================================================================================
# 그래프 이론
# 그래프 탐색
# 너비 우선 탐색
===================================================================================================================================
Log
===================================================================================================================================
' 2022-02-24-THU : 문제 파악
                   문제 해결
===================================================================================================================================
'''

def bfs(start):
    queue = deque([start])
    # 방문 기록
    graph[start[0]][start[1]] = 2
    
    while queue:
        x, y = queue.popleft()

        # 그래프 밖으로 나가거나 칸의 값이 0이면 Break
        if x < 0 or x > N - 1 or y < 0 or y > M - 1 or graph[x][y] == 0:
            break
        
        # 상하좌우로 이동
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            
            # 이동했을 때 그래프 밖으로 나가거나 칸의 값이 0이면 break
            if nx < 0 or nx > N - 1 or ny < 0 or ny > M - 1 or graph[nx][ny] != 1:
                continue
            
            # 큐에 추가
            queue.append([nx, ny])

            # 그래프에 최단 거리 값 갱신
            if graph[nx][ny] == 1:
                graph[nx][ny] = graph[x][y] + 1
                
        if x == N-1 and y == M-1:
            return graph[N-1][M-1] - 1

from collections import deque

# 세로 길이, 가로 길이
N, M = map(int, input().split())
graph = []
for _ in range(N):
    graph.append(list(map(int, input())))

# 상, 하, 좌, 우
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

print(bfs([0, 0]))