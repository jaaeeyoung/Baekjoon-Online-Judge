'''
===================================================================================================================================
문제
===================================================================================================================================
[1260] DFS와 BFS
===================================================================================================================================
시간 및 메모리 제한
===================================================================================================================================
# 시간 제한 : 2 초
# 메모리 제한 : 128 MB
===================================================================================================================================
문제 설명
===================================================================================================================================
# 그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호
  가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.
===================================================================================================================================
입력
===================================================================================================================================
# 첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선
  이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.
===================================================================================================================================
출력
===================================================================================================================================
# 첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.
===================================================================================================================================
입출력 예
===================================================================================================================================
입력 1
4 5 1
1 2
1 3
1 4
2 4
3 4

출력 1
1 2 4 3
1 2 3 4

입력 2
5 5 3
5 4
5 2
1 2
3 4
3 1

출력 2
3 1 2 5 4
3 1 4 2 5

입력 3
1000 1 1000
999 1000

출력 3
1000 999
1000 999
===================================================================================================================================
알고리즘 분류
===================================================================================================================================
# 그래프 이론
# 그래프 탐색
# 너비 우선 탐색
# 깊이 우선 탐색
===================================================================================================================================
Log
===================================================================================================================================
' 2022-02-23-WED : 문제 파악
                   문제 해결
===================================================================================================================================
'''

from collections import deque

# 정점의 개수, 간선의 개수, 탐색 시작 노드
N, M, V = map(int, input().split())

# 방문 기록 리스트 생성
graph = []
visited_dfs = []
visited_bfs = []
answer = []
for i in range(N+1):
    visited_dfs.append(False)
    visited_bfs.append(False)
    graph.append([])
    
# 그래프 생성
for _ in range(M):
    i, j = map(int, input().split())
    graph[i].append(j)
    if i not in graph[j]:
        graph[j].append(i)
        
def dfs(V, visited_dfs):
    
    # 현재 노드 방문 처리
    visited_dfs[V] = True
    answer.append(str(V))
    
    # 주변 노드 방문
    graph[V].sort()
    for i in graph[V]:
        if not visited_dfs[i]:
            dfs(i, visited_dfs)
    return answer

def bfs(V, visited_bfs):
    
    queue = deque([V])
    
    while queue:
        # 모든 노드 방문했으면 break
        if False not in visited_bfs[1:]:
            break
        
        now = queue.popleft()
        
        # 현재 노드 방문 처리
        visited_bfs[now] = True
        if str(now) not in answer:
            answer.append(str(now))
        
        # 주변 노드 방문
        for i in graph[now]:
            if not visited_bfs[i]:
                queue.append(i)
    
    return answer

print(' '.join(dfs(V, visited_dfs)))
answer = []
print(' '.join(bfs(V, visited_bfs)))