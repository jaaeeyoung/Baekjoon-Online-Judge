'''
===================================================================================================================================
문제
===================================================================================================================================
[6236] 용돈 관리
===================================================================================================================================
Log
===================================================================================================================================
' 2022-03-08-TUE : 문제 파악
                   문제 해결
' 2022-03-10-THU : Code 최적화
===================================================================================================================================
'''

'''
이진 탐색 - 반복 
mid : 한 번에 뺄 수 있는 금액 (K)
for문 안에서의 조건
➝  잔고가 오늘 예산보다 적으면 인출
mid 값 갱신의 조건
➝ 출금 횟수가 M보다 커지거나 mid값이 예산의 최댓값보다 작은 경우 mid를 키워서 재탐색
➝ 출금횟수가 M보다 작거나 같으면 mid 줄여서 재탐색 (최솟값 갱신)
'''

import sys
input = sys.stdin.readline

# 입력
N, M = map(int, input().split())
budget = []
for _ in range(N):
    budget.append(int(input()))

# start, end 초기화
start = min(budget)
end = sum(budget)

# 이진 탐색
answer = 0
while start <= end:
    
    mid = (start + end) // 2
    
    balance = 0
    count = 0
    for today in budget:
        
        # 오늘 예산보다 잔고가 부족하면 인출
        if balance < today:
            balance = mid
            count += 1
        
        balance -= today
    
    
    # 인출 횟수가 M보다 많거나 mid가 예산의 최댓값보다 작으면 mid값 증가시켜 다시 탐색
    if count > M or mid < max(budget):
        start = mid + 1
    else: # 인출 횟수가 M과 같거나 M보다 적으면 mid값 감소시켜 다시 탐색
        end = mid - 1
        answer = mid

print(answer)