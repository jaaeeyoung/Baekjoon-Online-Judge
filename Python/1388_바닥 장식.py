'''
===================================================================================================================================
문제
===================================================================================================================================
[1388] 바닥 장식
===================================================================================================================================
시간 및 메모리 제한
===================================================================================================================================
# 시간 제한 : 2 초
# 메모리 제한 : 128 MB
===================================================================================================================================
문제 설명
===================================================================================================================================
# 형택이는 건축가이다. 지금 막 형택이는 형택이의 남자 친구 기훈이의 집을 막 완성시켰다. 형택이는 기훈이 방의 바닥 장식을 디자인했고, 이제 
  몇 개의 나무 판자가 필요한지 궁금해졌다. 나무 판자는 크기 1의 너비를 가졌고, 양수의 길이를 가지고 있다. 기훈이 방은 직사각형 모양이고, 
  방 안에는 벽과 평행한 모양의 정사각형으로 나누어져 있다.

# 이제 ‘-’와 ‘|’로 이루어진 바닥 장식 모양이 주어진다. 만약 두 개의 ‘-’가 인접해 있고, 같은 행에 있다면, 두 개는 같은 나무 판자이고, 두 
  개의 ‘|’가 인접해 있고, 같은 열에 있다면, 두 개는 같은 나무 판자이다.

# 기훈이의 방 바닥을 장식하는데 필요한 나무 판자의 개수를 출력하는 프로그램을 작성하시오.
===================================================================================================================================
입력
===================================================================================================================================
# 첫째 줄에 방 바닥의 세로 크기N과 가로 크기 M이 주어진다. 둘째 줄부터 N개의 줄에 M개의 문자가 주어진다. 이것은 바닥 장식 모양이고, '-‘와 ’|‘로만 이루어져 있다. N과 M은 50 이하인 자연수이다.
===================================================================================================================================
출력
===================================================================================================================================
# 첫째 줄에 문제의 정답을 출력한다.
===================================================================================================================================
입출력 예
===================================================================================================================================
입력 1
4 4
----
----
----
----

출력 1
4

입력 2
6 9
-||--||--
--||--||-
|--||--||
||--||--|
-||--||--
--||--||-

출력 2
31

입력 3
7 8
--------
|------|
||----||
|||--|||
||----||
|------|
--------

출력 3
13

입력 4
10 10
||-||-|||-
||--||||||
-|-|||||||
-|-||-||-|
||--|-||||
||||||-||-
|-||||||||
||||||||||
||---|--||
-||-||||||

출력 4
41

입력 5
6 6
-||--|
||||||
|||-|-
-||||-
||||-|
||-||-

출력 5
19
===================================================================================================================================
알고리즘 분류
===================================================================================================================================
# 그래프 이론
# 그래프 탐색
# 너비 우선 탐색
# 깊이 우선 탐색
===================================================================================================================================
Log
===================================================================================================================================
' 2022-02-22-TUE : 문제 파악
                   문제 해결
===================================================================================================================================
'''

'''
Algorithm
1. DFS Algorithm - 재귀 함수 사용
2. 현재 index의 모양이 '-'이면 오른쪽으로 이동
3. '|' 모양이 나오거나 벽이 나오거나 visited == True일 때까지 이동하면서 각 index visited == True로 방문 처리
4. 현재 index의 모양이 '|'이면 아래로 이동
5. '-' 모양이 나오거나 벽이 나오거나 visited == True일 때까지 이동하면서 각 index visited == True로 방문 처리
6. 재귀 끝나면 True 반환하고 dfs()가 True를 반환하는 경우 count += 1
'''

def dfs(x, y):
    # 벽을 만나면 False 반환
    if x < -1 or x > N-1 or y < -1 or y > M-1:
        # print('2')
        return False
    
    # 현재 index가 이미 방문했던 곳이라면 False 반환
    if visited[x][y] == True:
        # print('1')
        return False
    
    # 현재 위치 방문 처리
    visited[x][y] = True
    # 현재 index의 모양이 '-'라면
    if graph[x][y] == '-' and (y == M-1 or graph[x][y+1] == '-'):
        dfs(x, y+1) # 오른쪽으로 이동하고
    elif graph[x][y] == '|' and (x == N-1 or graph[x+1][y] == '|'):
        dfs(x+1, y) # 아래쪽으로 이동
    return True

N, M = map(int, input().split())
graph = []
for _ in range(N):
    graph.append(list(input()))

visited = []
for i in range(N):
    temp = []
    for j in range(M):
        temp.append(False)
    visited.append(temp)
    
count = 0
for x in range(N):
    for y in range(M):
        if dfs(x, y) == True:
            count += 1
            
print(count)