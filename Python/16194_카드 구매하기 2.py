'''
===================================================================================================================================
문제
===================================================================================================================================
[11052] 카드 구매하기
===================================================================================================================================
Log
===================================================================================================================================
' 2022-04-13 WED : 문제 파악
                   문제 해결
===================================================================================================================================
'''
'''
Algorithm
Dynamic Programming
4장의 카드를 구매할 때 (1, 3), (2, 2) 고려
☞ (1, 3) : 1장의 카드를 구매하는 데 최적의 답 + 3장의 카드를 구매하는 데 최적의 답
☞ (2, 2) : 2장의 카드를 구매하는 데 최적의 답 + 2장의 카드를 구매하는 데 최적의 답
'''

N = int(input())
cards = list(map(int, input().split()))

dp = [10000*N] * (N+1)
dp[1] = cards[0]

for i in range(2, N+1):
    for j in range(1, N+1):
        # 현재 dp table에 담겨있는 값
        # j장 카드 구매하는 데 최적의 값 + i-j장 카드 구매하는 데 최적의 값
        # 카드팩으로 딱 맞게 구매할 때의 값 중 최솟값으로 갱신
        dp[i] = min(dp[i], dp[j]+dp[i-j], cards[i-1])
print(dp[-1])