'''
===================================================================================================================================
문제
===================================================================================================================================
[2792] 보석 상자
===================================================================================================================================
Log
===================================================================================================================================
' 2022-03-09-WED : 문제 파악
                   메모리 초과 -> 리스트 사용 줄여야될듯
                   student list 사용 x
                   7%에서 시간 초과
                   while문 조건을 보석 리스트의 마지막일 때 나가도록 조정
                   7%에서 시간 초과
                   UnboundLocalError : 함수 안에서 지역변수 초기화 안해줘서 생기는 오류,, ㅎㅎ
                   7%에서 시간 초과
                   Algorithm을 빼는 것이 아닌 나누는 것으로 변경
                   15% 틀렸습니다.
                   문제 해결
' 2022-03-10-THU : Code 최적화
===================================================================================================================================
'''
'''
Algorithm
이진 탐색 - 반복  
mid : 한 사람이 최대로 받을 수 있는 보석 개수 (질투심)
for문 안에서의 조건 
➝  보석의 개수 // mid : 보석을 받는 학생 수
➝  보석의 개수 % mid : 남는 보석 수 
➝  보석을 mid로 나눴을 때 나머지가 없으면 학생수 = 보석의 개수 // mid
➝  보석을 mid로 나눴을 때 나머지가 있으면 학생수 = 보석의 개수 // mid + 1
mid 값 갱신의 조건 
➝ 보석을 받은 학생 수가 N명보다 많으면 나누어주는 보석의 개수 증가
➝ 보석을 받은 학생 수가 N명보다 적으면 나누어주는 보석의 개수 최솟값 갱신
'''

import sys
input = sys.stdin.readline

# 입력
N, M = map(int, input().split())
gems = []
for _ in range(M):
    gems.append(int(input()))

# start, end 초기화
start = 1
end = sum(gems)

# 이진 탐색
answer = 0
while start <= end:
    
    mid = (start + end) // 2

    # mid가 0이면 break
    if mid == 0:
        break
    
    num_student = 0
    for num_gem in gems:
        
        if num_gem % mid > 0:
            num_student += num_gem // mid + 1
        else:
            num_student += num_gem // mid

    # 보석을 받은 학생의 수가 N명 보다 많으면 mid값 증가시켜 재탐색
    if num_student > N:
        start = mid + 1
    else: # 보석을 받은 학생 수가 N명보다 적으면 mid값 감소시켜 재탐색
        end = mid - 1
        answer = mid
        
print(answer)